@page "/users"
@rendermode InteractiveServer




@if (_users == null)
{
    <p><em>Loading..</em></p>
}
else
{

    <button @onclick="ToggleDataSource">@(_useApi ? "Visa lokala användare" : "Visa API-användare")</button>
    <button @onclick="ToggleSortOrder">@(_isAscending ? "Sortera Namn \u2191" : "Sortera Namn  \u2193")</button>
    <button @onclick="ToggleSortOrderById">@(_isAscending ? "Sortera ID \u2191" : "Sortera ID \u2193")</button>
    <InputText @bind-Value="_searchInput"></InputText>
    <button @onclick="LoadAndSortUsers">Sök</button>
    <table>
        <thead>
        <tr>
            <th>ID</th>
            <th>Namn</th>
            <th>Email</th>
            <th>Gata</th>
            <th>Stad</th>
            <th>Postnummer</th>
            <th>Företag</th>
            <th>Slogan</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in _users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.Name</td>
                <td>@user.Email</td>
                <td>@user.Address.Street</td>
                <td>@user.Address.City</td>
                <td>@user.Address.Zipcode</td>
                <td>@user.Company.Name</td>
                <td>@user.Company.CatchPhrase</td>
            </tr>
        }
        </tbody>
    </table>

    <p @onclick="ToggleShowUsers" style="cursor:pointer;"><b>@(_showAll ? "visa färre" : "visa alla")</b></p>

}





@code {

    private List<User>? _users;


    private readonly UserDataAccess _dataAccess = new UserDataAccess();
    private readonly UserDataImporter _dataImporter = new UserDataImporter();

    private bool _useApi = false;
    private bool _showAll = false;
    private bool _isAscending = true;
    private SortedBy _sortedBy = SortedBy.Name;

    private string _searchInput = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            await LoadAndSortUsers();
        }
    }

    private async Task GetData()
    {
        if (_useApi)
        {
            _users = (await _dataImporter.GetUsers()).ToList();

        }
        else
        {
            _users = (await _dataAccess.GetUsers()).ToList();

        }

    }

    private async Task LoadAndSortUsers()
    {

        await GetData();

        if (!string.IsNullOrEmpty(_searchInput))
        {
            _users = _users?.Where(user => user.Name.Contains(_searchInput, StringComparison.CurrentCultureIgnoreCase)).ToList();

        }

        if (_sortedBy == SortedBy.Name)
        {
            if(_isAscending)
            {
                SortByName();
            }
            else
            {
                SortByNameDescending();
            }
        }
        else if(_sortedBy == SortedBy.Id)
        {
            if (_isAscending)
            {
                SortById();
            }
            else
            {
                SortByIdDescending();
            }
        }
        if(!_showAll && _users != null)
        {
            _users = _users.Take(5).ToList();
        }
        StateHasChanged();
    }



    private void SortByName()
    {
       

        _users = _users?.OrderBy(users => users.Name).ToList();
        

    }

    private void SortByNameDescending()
    {
     
        _users = _users?.OrderByDescending(users => users.Name).ToList();

    }

    private void SortById()
    {
      
        _users = _users?.OrderBy(users => users.Id).ToList();
    }

    private void SortByIdDescending()
    {
      
        _users = _users?.OrderByDescending(users => users.Id).ToList();
    }

    private async Task ToggleDataSource()
    {
        _useApi = !_useApi;
        await LoadAndSortUsers();
    }

    private async Task ToggleSortOrder()
    {

        _sortedBy = SortedBy.Name;
        _isAscending = !_isAscending;
        await LoadAndSortUsers();

    }

    private async Task ToggleSortOrderById()
    {
        _sortedBy = SortedBy.Id;
        _isAscending = !_isAscending;

       await LoadAndSortUsers();

    }

    private async Task ToggleShowUsers()
    {
        _showAll = !_showAll;

        await LoadAndSortUsers();
        
    }

}